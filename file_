#include "shell.h"

/**
 * Display the command history, showing commands with line numbers starting from 0.
 *
 * @param shellInfo - Structure containing potential arguments.
 * @return Always returns 0.
 */
int displayCommandHistory(shell_info_t *shellInfo)
{
    printCommandList(shellInfo->history);
    return 0;
}

/**
 * Remove an alias by setting it to an empty string.
 *
 * @param shellInfo - Structure containing potential arguments.
 * @param aliasString - The alias string to be removed.
 * @return Returns 0 on success, 1 on error.
 */
int removeAlias(shell_info_t *shellInfo, char *aliasString)
{
    char *equalsPosition;
    char equalsChar;
    int result;

    equalsPosition = findEqualsCharacter(aliasString);
    if (!equalsPosition)
        return 1;

    equalsChar = *equalsPosition;
    *equalsPosition = 0;

    result = deleteNodeAtIndex(&(shellInfo->alias),
        findNodeIndexByAlias(shellInfo->alias, aliasString, -1));

    *equalsPosition = equalsChar;
    return result;
}

/**
 * Create or modify an alias.
 *
 * @param shellInfo - Structure containing potential arguments.
 * @param aliasString - The string representing the alias.
 * @return Returns 0 on success, 1 on error.
 */
int defineAlias(shell_info_t *shellInfo, char *aliasString)
{
    char *equalsPosition;

    equalsPosition = findEqualsCharacter(aliasString);
    if (!equalsPosition)
        return 1;

    if (!*++equalsPosition)
        return removeAlias(shellInfo, aliasString);

    removeAlias(shellInfo, aliasString);
    return (addNodeToEnd(&(shellInfo->alias), aliasString, 0) == NULL);
}

/**
 * Print an alias.
 *
 * @param aliasNode - The alias node.
 * @return Returns 0 on success, 1 on error.
 */
int printAliasNode(list_t *aliasNode)
{
    char *equalsPosition = NULL;
    char *aliasStart = NULL;

    if (aliasNode)
    {
        equalsPosition = findEqualsCharacter(aliasNode->str);
        for (aliasStart = aliasNode->str; aliasStart <= equalsPosition; aliasStart++)
            printCharacter(*aliasStart);
        printCharacter('\'');
        printString(equalsPosition + 1);
        printString("'\n");
        return 0;
    }
    return 1;
}

/**
 * Mimic the behavior of the alias built-in command (man alias).
 *
 * @param shellInfo - Structure containing potential arguments.
 * @return Always returns 0.
 */
int handleAliasCommand(shell_info_t *shellInfo)
{
    int i = 0;
    char *equalsPosition = NULL;
    list_t *aliasNode = NULL;

    if (shellInfo->argc == 1)
    {
        aliasNode = shellInfo->alias;
        while (aliasNode)
        {
            printAliasNode(aliasNode);
            aliasNode = aliasNode->next;
        }
        return 0;
    }

    for (i = 1; shellInfo->argv[i]; i++)
    {
        equalsPosition = findEqualsCharacter(shellInfo->argv[i]);
        if (equalsPosition)
            defineAlias(shellInfo, shellInfo->argv[i]);
        else
            printAliasNode(findAliasNode(shellInfo->alias, shellInfo->argv[i], '='));
    }

    return 0;
}
